/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  serial,
  varchar,
  timestamp,
  numeric,
  boolean,
  jsonb,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_users_role = pgEnum('enum_users_role', [
  'admin',
  'contributor',
  'editor',
  'organizer',
  'user',
])
export const enum_events_location = pgEnum('enum_events_location', [
  'heartOfGold',
  'focalPoint',
  'shilTavern',
])
export const enum_events_status = pgEnum('enum_events_status', ['draft', 'published'])
export const enum__events_v_version_location = pgEnum('enum__events_v_version_location', [
  'heartOfGold',
  'focalPoint',
  'shilTavern',
])
export const enum__events_v_version_status = pgEnum('enum__events_v_version_status', [
  'draft',
  'published',
])
export const enum_articles_status = pgEnum('enum_articles_status', ['draft', 'published'])
export const enum__articles_v_version_status = pgEnum('enum__articles_v_version_status', [
  'draft',
  'published',
])

export const users_role = pgTable(
  'users_role',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_users_role('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('users_role_order_idx').on(columns.order),
    parentIdx: index('users_role_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [users.id],
      name: 'users_role_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    firstName: varchar('first_name').notNull(),
    lastName: varchar('last_name').notNull(),
    fullName: varchar('full_name'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
  }),
)

export const events = pgTable(
  'events',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    date: timestamp('date', { mode: 'string', withTimezone: true, precision: 3 }),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    location: enum_events_location('location'),
    link: varchar('link'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_events_status('_status').default('draft'),
  },
  (columns) => ({
    events_image_idx: index('events_image_idx').on(columns.image),
    events_updated_at_idx: index('events_updated_at_idx').on(columns.updatedAt),
    events_created_at_idx: index('events_created_at_idx').on(columns.createdAt),
    events__status_idx: index('events__status_idx').on(columns._status),
  }),
)

export const _events_v = pgTable(
  '_events_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => events.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_description: varchar('version_description'),
    version_date: timestamp('version_date', { mode: 'string', withTimezone: true, precision: 3 }),
    version_image: integer('version_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_location: enum__events_v_version_location('version_location'),
    version_link: varchar('version_link'),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__events_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
  },
  (columns) => ({
    _events_v_parent_idx: index('_events_v_parent_idx').on(columns.parent),
    _events_v_version_version_image_idx: index('_events_v_version_version_image_idx').on(
      columns.version_image,
    ),
    _events_v_version_version_updated_at_idx: index('_events_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _events_v_version_version_created_at_idx: index('_events_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _events_v_version_version__status_idx: index('_events_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _events_v_created_at_idx: index('_events_v_created_at_idx').on(columns.createdAt),
    _events_v_updated_at_idx: index('_events_v_updated_at_idx').on(columns.updatedAt),
    _events_v_latest_idx: index('_events_v_latest_idx').on(columns.latest),
  }),
)

export const articles = pgTable(
  'articles',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    content: jsonb('content'),
    author: integer('author_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_articles_status('_status').default('draft'),
  },
  (columns) => ({
    articles_author_idx: index('articles_author_idx').on(columns.author),
    articles_updated_at_idx: index('articles_updated_at_idx').on(columns.updatedAt),
    articles_created_at_idx: index('articles_created_at_idx').on(columns.createdAt),
    articles__status_idx: index('articles__status_idx').on(columns._status),
  }),
)

export const _articles_v = pgTable(
  '_articles_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => articles.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_subtitle: varchar('version_subtitle'),
    version_content: jsonb('version_content'),
    version_author: integer('version_author_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__articles_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
  },
  (columns) => ({
    _articles_v_parent_idx: index('_articles_v_parent_idx').on(columns.parent),
    _articles_v_version_version_author_idx: index('_articles_v_version_version_author_idx').on(
      columns.version_author,
    ),
    _articles_v_version_version_updated_at_idx: index(
      '_articles_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _articles_v_version_version_created_at_idx: index(
      '_articles_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _articles_v_version_version__status_idx: index('_articles_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _articles_v_created_at_idx: index('_articles_v_created_at_idx').on(columns.createdAt),
    _articles_v_updated_at_idx: index('_articles_v_updated_at_idx').on(columns.updatedAt),
    _articles_v_latest_idx: index('_articles_v_latest_idx').on(columns.latest),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    eventsID: integer('events_id'),
    articlesID: integer('articles_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_events_id_idx: index(
      'payload_locked_documents_rels_events_id_idx',
    ).on(columns.eventsID),
    payload_locked_documents_rels_articles_id_idx: index(
      'payload_locked_documents_rels_articles_id_idx',
    ).on(columns.articlesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    eventsIdFk: foreignKey({
      columns: [columns['eventsID']],
      foreignColumns: [events.id],
      name: 'payload_locked_documents_rels_events_fk',
    }).onDelete('cascade'),
    articlesIdFk: foreignKey({
      columns: [columns['articlesID']],
      foreignColumns: [articles.id],
      name: 'payload_locked_documents_rels_articles_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const relations_users_role = relations(users_role, ({ one }) => ({
  parent: one(users, {
    fields: [users_role.parent],
    references: [users.id],
    relationName: 'role',
  }),
}))
export const relations_users = relations(users, ({ many }) => ({
  role: many(users_role, {
    relationName: 'role',
  }),
}))
export const relations_media = relations(media, () => ({}))
export const relations_events = relations(events, ({ one }) => ({
  image: one(media, {
    fields: [events.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations__events_v = relations(_events_v, ({ one }) => ({
  parent: one(events, {
    fields: [_events_v.parent],
    references: [events.id],
    relationName: 'parent',
  }),
  version_image: one(media, {
    fields: [_events_v.version_image],
    references: [media.id],
    relationName: 'version_image',
  }),
}))
export const relations_articles = relations(articles, ({ one }) => ({
  author: one(users, {
    fields: [articles.author],
    references: [users.id],
    relationName: 'author',
  }),
}))
export const relations__articles_v = relations(_articles_v, ({ one }) => ({
  parent: one(articles, {
    fields: [_articles_v.parent],
    references: [articles.id],
    relationName: 'parent',
  }),
  version_author: one(users, {
    fields: [_articles_v.version_author],
    references: [users.id],
    relationName: 'version_author',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    eventsID: one(events, {
      fields: [payload_locked_documents_rels.eventsID],
      references: [events.id],
      relationName: 'events',
    }),
    articlesID: one(articles, {
      fields: [payload_locked_documents_rels.articlesID],
      references: [articles.id],
      relationName: 'articles',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  enum_users_role: typeof enum_users_role
  enum_events_location: typeof enum_events_location
  enum_events_status: typeof enum_events_status
  enum__events_v_version_location: typeof enum__events_v_version_location
  enum__events_v_version_status: typeof enum__events_v_version_status
  enum_articles_status: typeof enum_articles_status
  enum__articles_v_version_status: typeof enum__articles_v_version_status
  users_role: typeof users_role
  users: typeof users
  media: typeof media
  events: typeof events
  _events_v: typeof _events_v
  articles: typeof articles
  _articles_v: typeof _articles_v
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_users_role: typeof relations_users_role
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_events: typeof relations_events
  relations__events_v: typeof relations__events_v
  relations_articles: typeof relations_articles
  relations__articles_v: typeof relations__articles_v
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-postgres/types' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
